# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-01-01 13:25
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Advice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('course_id', models.CharField(max_length=10, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseNumber',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('number', models.CharField(max_length=5)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.CharField(max_length=100)),
                ('response_avg', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MaxValueValidator(5.0), django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=40)),
                ('last_name', models.CharField(max_length=40)),
                ('emplid', models.CharField(max_length=15, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('days', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator(message='meeting days string is invalid', regex='^M?T?W?(?:Th)?F?$')])),
                ('location', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Offering',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('guid', models.IntegerField()),
                ('title', models.CharField(max_length=150)),
                ('pdf', models.NullBooleanField()),
                ('pdf_only', models.BooleanField(default=False)),
                ('audit', models.NullBooleanField()),
                ('dist_req', models.CharField(blank=True, choices=[('EC', 'Epistemology and Cognition'), ('EM', 'Ethical Thought and Moral Values'), ('HA', 'Historical Analysis'), ('LA', 'Literature and the Arts'), ('QR', 'Quantitative Reasoning'), ('SA', 'Social Analysis'), ('STL', 'Science and Technology with Lab'), ('STN', 'Science and Technology, no Lab')], max_length=3)),
                ('description', models.TextField(blank=True)),
                ('additional_info', models.TextField(blank=True)),
                ('last_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offerings', to='api.Course')),
                ('instructors', models.ManyToManyField(to='api.Instructor')),
                ('primary_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='api.CourseNumber')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('guid', models.CharField(max_length=15, unique=True)),
                ('name', models.CharField(max_length=5, validators=[django.core.validators.RegexValidator(message='section name is invalid', regex='^[A-Z]\\d\\d[A-Z]?$')])),
                ('type', models.CharField(max_length=10)),
                ('status', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='status name is invalid', regex='^[a-zA-Z]+$')])),
                ('enrollment', models.PositiveIntegerField()),
                ('capacity', models.PositiveIntegerField()),
                ('offering', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='api.Offering')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=3, unique=True, validators=[django.core.validators.RegexValidator(message='invalid subject code', regex='[A-Z]{3}')])),
                ('name', models.CharField(blank=True, max_length=100, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('suffix', models.CharField(max_length=6, unique=True, validators=[django.core.validators.RegexValidator(message='suffix is invalid', regex='^(?:S|SU|F)\\d{4}$')])),
                ('name', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator(message='invalid term name', regex='^(?:Fall|Spring|Summer) \\d{4}$')])),
                ('code', models.PositiveSmallIntegerField(unique=True, validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(10000)])),
                ('start_date', models.DateField(unique=True)),
                ('end_date', models.DateField(unique=True)),
                ('season', models.CharField(choices=[('S', 'Spring'), ('SU', 'Summer'), ('F', 'Fall')], max_length=2)),
                ('year', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(3000)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('netid', models.CharField(max_length=15)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='offering',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offerings', to='api.Term'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meetings', to='api.Section'),
        ),
        migrations.AddField(
            model_name='evaluation',
            name='offering',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='api.Offering'),
        ),
        migrations.AddField(
            model_name='coursenumber',
            name='offering',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cross_listings', to='api.Offering'),
        ),
        migrations.AddField(
            model_name='coursenumber',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_numbers', to='api.Subject'),
        ),
        migrations.AddField(
            model_name='advice',
            name='offering',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='advice', to='api.Offering'),
        ),
    ]
